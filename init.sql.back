-- Create the stock table
CREATE TABLE stock (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  product_id INTEGER NOT NULL,
  branch_id INTEGER NOT NULL,
  quantity INTEGER NOT NULL DEFAULT 0,
  reserved INTEGER NOT NULL DEFAULT 0,
  created_at TIMESTAMP DEFAULT now(),
  updated_at TIMESTAMP DEFAULT now()
);

CREATE UNIQUE INDEX uniq_product_branch ON stock (product_id, branch_id);

-- Function to convert row to JSON
CREATE OR REPLACE FUNCTION stock_to_json() RETURNS trigger AS $$
BEGIN
    SELECT json_build_object(
        'id', NEW.id,
        'product_id', NEW.product_id,
        'branch_id', NEW.branch_id,
        'quantity', NEW.quantity,
        'reserved', NEW.reserved,
        'created_at', NEW.created_at,
        'updated_at', NEW.updated_at
    ) INTO NEW.notification_payload;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger for INSERT and UPDATE
CREATE OR REPLACE FUNCTION notify_stock_changes() RETURNS trigger AS $$
DECLARE
    payload json;
BEGIN
    IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN
        payload = stock_to_json();
        PERFORM pg_notify('stock_changes', payload::text);
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER stock_changes_trigger
    AFTER INSERT OR UPDATE ON stock
    FOR EACH ROW
    EXECUTE FUNCTION notify_stock_changes();
